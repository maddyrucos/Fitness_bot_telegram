from aiogram import Dispatcher, Bot, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import os

import Database.database as db
from Training import training
from IMB import feeding
import profile

from states import Training
import markups as mks
import config

bot = Bot(token=config.TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∞—è –ë–î
async def on_startup(_):
    await db.init_db()


# –•–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º "/start"
@dp.message_handler(commands=['start'], state='*')
async def command_start(message: types.Message):

    '''# –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è '/start' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass
    '''

    # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = message.from_user.id
    username = message.from_user.username

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è (–ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î)
    await db.create_profile(user_id, username)

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await Training.default.set()

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcomeText = (f'üëã –ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!\n'
                   f'üèãÔ∏è –Ø –∫–∞—Ä–º–∞–Ω–Ω—ã–π <i>—Ñ–∏—Ç–Ω–µ—Å —Ç—Ä–µ–Ω–µ—Ä</i>. '
                   f'–° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å:\n'
                   f'üí™ –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n'
                   f'‚úçÔ∏è –°–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Ü–∏–æ–Ω –ø–∏—Ç–∞–Ω–∏—è\n'
                   f'‚ù§Ô∏è –°–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º –∑–¥–æ—Ä–æ–≤—å–µ–º')
    await bot.send_message(message.from_user.id, welcomeText, parse_mode = "HTML", reply_markup=mks.main_menu)


# –•–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º "/admin"
@dp.message_handler(commands=['admin'], state = '*')
async def admin(message: types.Message):

    #–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await db.check_admin(bot, dp, message.from_user.username, message.from_user.id)


# –•–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –∏–º–µ–µ—Ç callback "main_menu",
# –¥–∞–ª–µ–µ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
@dp.callback_query_handler(lambda c: c.data == 'main_menu', state = '*')
async def main_menu(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback_query.message.delete()

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await Training.default.set()

    await callback_query.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=mks.main_menu)


@dp.callback_query_handler(lambda c: c.data == 'trainings', state = '*')
async def trainings_menu(callback_query: types.CallbackQuery):

    await callback_query.message.delete()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
    path = os.getcwd()
    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    await training.init_trainings(dp, path)
    await callback_query.message.answer("üí™ –†–∞–∑–¥–µ–ª —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏.\n"
                                        "üëÄ –Ø –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–≤–æ–∏–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏.\nÔ∏èÔ∏è"
                                        "‚úçÔ∏è –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã, —è –ø–æ–º–æ–≥—É –µ—ë —Å–æ—Å—Ç–∞–≤–∏—Ç—å!",
                                        reply_markup=mks.trainings_menu)


@dp.callback_query_handler(lambda c: c.data == 'feeding', state='*')
async def feeding_menu(callback_query: types.CallbackQuery):

    await callback_query.message.delete()

    await callback_query.message.answer("üçî –ó–¥–µ—Å—å —Ö—Ä–∞–Ω–∏—Ç—Å—è —Ç–≤–æ–π —Ä–∞—Ü–∏–æ–Ω –ø–∏—Ç–∞–Ω–∏—è.\n"
                                        "‚úçÔ∏è –Ø –≥–æ—Ç–æ–≤ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±–µ –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å –∏–ª–∏ –Ω–µ–¥–µ–ª—é!",
                                        reply_markup=mks.feeding_menu)

    await feeding.get_height_weight(dp)


@dp.callback_query_handler(lambda c: c.data == 'profile', state='*')
async def profile_menu(callback_query: types.CallbackQuery):

    await callback_query.message.delete()

    await profile.profile(dp, callback_query)


if __name__ == '__main__':
    executor.start_polling(dp,
                           skip_updates=True,
                           on_startup=on_startup)
